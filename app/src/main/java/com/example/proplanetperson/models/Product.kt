package com.example.proplanetperson.models

import com.google.firebase.database.Exclude
import com.google.firebase.database.IgnoreExtraProperties

// data class for a product listed for sale
@IgnoreExtraProperties // Useful for Firebase to ignore properties not matching database fields
data class Product(
    var productId: String = "",       // Unique ID for the product (e.g., generated by Firebase push key)
    val name: String = "",            // Name of the product
    val description: String = "",     // Detailed description of the product
    val price: Double = 0.0,          // Selling price of the product
    val imageUrl: String = "",        // URL to the product's main image
    val category: String = "",        // Category the product belongs to (e.g., "Clothing", "Electronics")
    val stockQuantity: Int = 0,       // Number of units available in stock
    val sellerId: String = "",        // ID of the user or entity selling this product
    val createdAt: Long = 0L,         // Timestamp of when the product was added (e.g., System.currentTimeMillis())
    val averageRating: Float = 0.0f,  // Average customer rating (e.g., from 0.0 to 5.0)
    val reviewsCount: Int = 0         // Number of reviews received for the product
) {
    // No-argument constructor required for Firebase deserialization
    constructor() : this("", "", "", 0.0, "", "", 0, "", 0L, 0.0f, 0)

    // Optional: A computed property to check if the product is in stock
    // REMOVED @Exclude here as it's not applicable to properties without backing fields
    val isInStock: Boolean
        get() = stockQuantity > 0

    // Optional: A computed property for display price (e.g., formatted currency)
    // You can keep @Exclude here as `fun` is an applicable target
    @Exclude
    fun getFormattedPrice(): String {
        return "$${String.format("%.2f", price)}" // Example: "$19.99"
    }
}